/*! 
    @page mathmodel Математическая модель
        @section intro Математика внутри anger-engine.
        На этой странице можно прочитать, как движок рассчитывает видимое изображение; здесь описаны и объяснены все 
        математические формулы, примененные внутри anger-engine.

        @section DDA-principle Базовый принцип рейкастинга и алгоритм DDA.
        В 1990-е годы, когда персональные компьютеры были еще слишком слабы, чтобы обрабатывать полноценную 3D-графику в реальном
        времени, широкое применение нашли различные способы <i>имитации</i> 3D-графики в играх. За возможность генерировать
        изображения, очень напоминающие полноценный 3D-рендер, обычно приходилось платить ограничениями, накладываемыми на 
        геймплей. Одним из таких подходов стал raycasting.
        <br>
        Принцип рейкастинга можно описать так: для каждого пикселя (столбца пикселей) на мониторе игрока испускается 1 т. н. 
        "зрительный луч". Зная его направление, расположение и форму всех объектов на отрисовываемой сцене, можно вычислить точку
        столкновения этого луча с видимым объектом и уже исходя из свойств объекта (расстояния до него, текстуры/цвета) можно
        задать цвет пиксела на мониторе. Таким образом генерируется все видимое игроком изображение.
        <br>
        Для простоты реализации игрового движка на уровни игры наложены следующие ограничения: уровень может состоять
        только из кубических непрозрачных блоков одинаковой высоты -- стен. Стены расставлены по квадратной сетке в одной 
        плоскости, в этой же плоскости движется игрок. При взгляде сверху фрагмент уровня может выглядеть так:
        <img src="../../doxyfiles/figures/base_map.svg"/>
        Тогда для того, чтобы отрисовать на экране стены, необходимо лишь:
        <ul>
            <li> Для каждого <i>столбца пикселей</i> на экране смоделировать движение одного луча и найти его точку столкновения
            с ближайшей стеной</li>
            <li> Нарисовать на экране вертикальную полоску шириной в 1 пиксел. Ее цвет (текстура) -- цвет (текстура) стены,
            с которой столкнулся соответствующий луч, а высота вычисляется, исходя из расстояния до этой стены.
        </ul>
        Для выполнения этих операций достаточно двумерного представления карты уровня и игрока. Все вычисления оперируют только
        двумя координатами.
        Изображение, полученное таким образом, выглядит примерно так:
        <img src="../../doxyfiles/figures/screen_walls_only.png"
        Отсюда видно, что при работе над рейкастинг-движком приходится решать 3 главные проблемы:
        <ul>
            <li> В каком направлении испускаются зрительные лучи?</li>
            <li> Как найти точку столкновения луча и стены? </li>
            <li> Как вычислить высоту видимого столбца пикселов? </li>
        </ul>
        Алгоритм DDA решает вторую проблему.

        @sa Подробнее о DDA можно прочитать <a href="https://lodev.org/cgtutor/raycasting.html#The_Basic_Idea_">в этой 
        статье (англ.)</a>. Автор не только описывает суть алгоритма, но и сравнивает его с альтернативами, распространенными 
        некогда в raycasting-играх.
*/
