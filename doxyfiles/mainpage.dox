/*!
    @mainpage Project Anger
    @details Project Anger -- демонстрационная видеоигра для Linux, основанная на движке anger-engine.
    <ul>
        <li> 
            <b> Об игре: </b>демо-игра представляет собой 3D-бродилку по уровню. Никаких врагов, никаких айтемов / ачивок
             / и т.п. Только неспешные прогулки среди кубических стен, разноцветная плитка под ногами, любование пейзажами 
             на горизонте...  <br>
             <img src="../../doxyfiles/screenshots/angerdemo2.png" width=480 height=270/>
             <img src="../../doxyfiles/screenshots/angerdemo3.png" width=480 height=270/>
        </li>
        <li>
            <b>Как запустить?</b> @code{.sh} ./run имя_файла.lvl @endcode Два уровня можно найти в папке levels.
        </li>
        <li>
            <b> О создании собственных уровней: </b>если коротко, то уровни создаются как CSV-файл в любом табличном процессоре (MS Excel,
            Libre Office Calc...), после чего конвертируются в JSON утилитой levelconv (levels/levelconv.py). JSON-файлы .lvl
            читаются игрой. @ref leveldesign "Подробнее можно прочитать здесь"
        </li>
        <li>
            <b> О движке:</b> движок anger-engine позволяет создавать псевдо-3D игры, использующие raycasting-алгоритм для 
            рендеринга. Возможности:
            <ul>
                <li> Текстурированные стены и пол </li>
                <li> Открытое небо с произвольным скайбоксом вместо давящего потолка </li>
                <li> Имитация глобального освещения: разная освещенность разных граней стен, тены от стен на полу </li>
                <li> Непроницаемые для игрока стены </li>
                <li> Падение освещенности с расстоянием </li>
            </ul>
            Производительность: на ноутбуке с AMD Ryzen 3450U внутри, под Ubuntu при подключенной зарядке и выставленной максимальной
            частотой процессора (2.7 МГц) выдает 10-15 FPS при разрешении экрана 1920x1080, 25-40 FPS при разрешении 1280x720,
            60-100 FPS при разрешении 600x400.
            <blockquote>
                Классический raycasting-алгоритм, реализованный в этом движке, для расчета графики использует исключительно CPU,
                не трогая видеокарту. Так как процессор, вообще говоря, не предназначен для подобных расчетов, производительность
                сильно ниже расчетов полноценной 3D-графики на видеокарте. Производительность алгоритмов, использованных здесь,
                зависит также от разрешения экрана.
            </blockquote>
            <li>
            <b>Технические детали:</b> алгоритм рендеринга основан на классическом DDA (<a href="https://lodev.org/cgtutor/raycasting.html#The_Basic_Idea_">Подробнее</a>).
            Используется многопоточный рендеринг 
            (это позволяет если не радикально решить проблему с производительностью, то хотя бы улучшить ситуацию).
            </li>
            <li>
            <b>Сторонние зависимости:</b> <b>SFML 2.5.1 или новее</b> для графической части, <b>nlohmann json</b> для чтения JSON-файлов, 
            <b>pthread</b> для многопоточного рендеринга/
            </li>
            <li>
                <b> Как установить?</b>
                    <li>
                        <ol> Установить SFML 2.5.1 или новее с репозитория. Если с репозитория не ставится, скачать
                        исходники с <a href="http://sfml-dev.org">официального сайта</a> и изменить Makefile  в соответствии с 
                        инструкциями на этом же сайте</ol>
                        <ol> Запустить <code>make</code></ol>
                    </li>
            </li>
            <li><b>Под Windows соберется/запустится?</b> Должна, хотя я не уверен в этом. Нужно пробовать.</li>
        </li>
    </ul>
    @author Simply Ian
    @date сентябрь-ноябрь 2023
*/